pipeline {
    agent any

    environment {
        DOCKER_USER = "onsonsonsons"
        DOCKER_REGISTRY = "docker.io"
        GIT_COMMIT_SHORT = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
    }

    stages {
        stage('Checkout & Prepare') {
            steps {
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    echo "Commit short: ${env.GIT_COMMIT_SHORT}"
                }
            }
        }

        stage('Checkout') {
      steps {
        checkout scm
        script {
          env.GIT_COMMIT_SHORT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
          echo "Commit short: ${env.GIT_COMMIT_SHORT}"
        }
      }
    }

    stage('Prepare Buildx') {
      steps {
        sh '''
          export DOCKER_CLI_EXPERIMENTAL=enabled
          docker buildx inspect mybuilder >/dev/null 2>&1 || docker buildx create --use --name mybuilder
          docker buildx use mybuilder
        '''
      }
    }

    stage('Build Docker Images (BuildKit)') {
      steps {
        script {
          env.DOCKER_BUILDKIT = "1"
          // Build images and load to local docker (so Trivy can scan)
          sh """
            docker buildx build --platform linux/amd64 --progress=plain -t ${DOCKER_USER}/eureka-server:${GIT_COMMIT_SHORT} ./backend/Eureka-Server --load
            docker buildx build --platform linux/amd64 --progress=plain -t ${DOCKER_USER}/formation-service:${GIT_COMMIT_SHORT} ./backend/Formation-Service --load
            docker buildx build --platform linux/amd64 --progress=plain -t ${DOCKER_USER}/user-service:${GIT_COMMIT_SHORT} ./backend/User-Service --load
            
          """
        }
      }
    }

        stage('Trivy Security Scan') {
    steps {
        script {
            def images = ["eureka-server", "formation-service", "user-service"]
            for (img in images) {
                // Supprime les espaces ou retours chariot
                def cleanTag = sh(script: "echo ${GIT_COMMIT_SHORT} | tr -d '\\n'", returnStdout: true).trim()
                def imgTag = "${DOCKER_USER}/${img}:${cleanTag}"
                echo "üîç Scanning image ${imgTag} with Trivy..."
                
                // Scan local avec docker://
                sh "trivy image --exit-code 1 --severity HIGH,CRITICAL docker://${imgTag} || exit 1"
            }
        }
    }
}


        stage('Docker Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push ${DOCKER_USER}/formation-service:${GIT_COMMIT_SHORT}
                        docker push ${DOCKER_USER}/user-service:${GIT_COMMIT_SHORT}
                    """
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent(['ec2-ssh-key']) {
                    sh """
                    ssh -o StrictHostKeyChecking=no ec2-user@18.215.53.218 '
                        cd /home/ec2-user/devsecops-project &&
                        docker-compose pull &&
                        docker-compose down &&
                        docker-compose up -d
                    '
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ DevSecOps pipeline completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed. Check build, Trivy scan, or deployment logs."
        }
    }
}
